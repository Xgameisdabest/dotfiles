#!/bin/bash

source ~/.config/dtf-config/config
rofi_theme=${rofi_theme:-black}
if [[ $rofi_theme == "white" ]]; then
	path_to_theme="~/.config/rofi/rofi_theme/white/white.rasi"
else
	path_to_theme="~/.config/rofi/rofi_theme/black/black.rasi"
fi

main_menu_height=140
main_menu_width=220px

mode_menu_height=175
mode_menu_width=375px

goback="Back 󰌍 "
quit="Exit 󰈆 "

#Monitor pick
main_menu(){
monitor_list=$(wlr-randr | awk '/^[A-Za-z0-9-]+ / {print $1}')

monitor_list_count=$(echo "$monitor_list" | wc -l)

height_per_monitor_listed=$((main_menu_height + (monitor_list_count * 38)))

monitor_picked=$( echo -e "$monitor_list\n$quit" | rofi -dmenu -p " Monitors 󰍺  " -theme $path_to_theme -theme-str "listview {columns: 1; layout: vertical;}" -theme-str "window {width: $main_menu_width; height: ${height_per_monitor_listed};}")

if [[ -z "$monitor_picked" ]] || [[ "$monitor_picked" = "$quit" ]]; then
	exit
else
	mode_menu
fi
}

#List all available resolutions+rates for chosen monitor
mode_menu(){
mode=$(wlr-randr | awk -v mon="$monitor_picked" '
    $1 == mon {inside=1; next}
    /^[A-Za-z0-9-]+ / {inside=0}
    inside && /^[ ]+[0-9]+x[0-9]+/ {
        res=$1
        gsub(/[^0-9.]/,"",$2) # sometimes refresh is in $2, sometimes $3
        gsub(/[^0-9.]/,"",$3)
        rate = ($3 != "" ? $3 : $2)
        print res "@" rate
    }
')

mode_list_count=$(echo "$mode" | wc -l)

height_per_mode_listed=$((mode_menu_height + (mode_list_count * 38)))

if [[ $height_per_mode_listed -gt 710 ]]; then
	height_per_mode_listed=710
fi

# Save/Load monitor status
get_current_config(){
    hyprctl monitors -j | jq -r --arg mon "$monitor_picked" \
        '.[] | select(.name==$mon) | "\(.width)x\(.height)@\(.refreshRate),\(.x)x\(.y),\(.scale)"'
}

get_preferred_mode(){
    wlr-randr | awk -v mon="$monitor_picked" '
        $1 == mon {inside=1; next}
        /^[A-Za-z0-9-]+ / {inside=0}
        inside && /\*/ {print $1 "@" $2; exit}
    ' | tr -d '*'
}

save_mode(){
    mkdir -p ~/.cache/hypr-monitors
    echo "$(get_current_config)" > ~/.cache/hypr-monitors/$monitor_picked
}

restore_mode(){
    if [[ -f ~/.cache/hypr-monitors/$monitor_picked ]]; then
        lastconfig=$(cat ~/.cache/hypr-monitors/$monitor_picked)
        hyprctl keyword monitor "$monitor_picked,$lastconfig"
    else
        pref=$(get_preferred_mode)
        if [[ -n "$pref" ]]; then
            # fallback still uses auto if no cache
            hyprctl keyword monitor "$monitor_picked,$pref,auto,1"
        fi
    fi
}

# Count enabled monitors
enabled_count=$(hyprctl monitors -j | jq '[.[] | select(.dpmsStatus == true)] | length')

# Status of the current monitor
display_status(){
    hyprctl monitors -j | jq -r --arg mon "$monitor_picked" '.[] | select(.name==$mon) | .dpmsStatus'
}
status=$(display_status)

# Build menu entries
if [[ "$status" == "true" ]]; then
    if [[ $enabled_count -gt 1 ]]; then
        menu_entries="On\n$mode\n$goback"
    else
        menu_entries="$mode\n$goback"
    fi
else
    menu_entries="Off\n$goback"
fi

# Menu
mode_picked=$(echo -e "$menu_entries" | rofi -dmenu -p " Resolution 󰹑  " \
    -theme $path_to_theme \
    -theme-str "listview {columns: 1; layout: vertical;}" \
    -theme-str "window {width: $mode_menu_width; height: $height_per_mode_listed;}")

if [[ -z "$mode_picked" ]]; then
    exit
elif [[ $mode_picked == "$goback" ]]; then
    main_menu
elif [[ $mode_picked == "On" ]]; then
    save_mode
    hyprctl keyword monitor "$monitor_picked,disable"
elif [[ $mode_picked == "Off" ]]; then
    restore_mode
fi

# Apply resolution change if user picked one
if [[ "$mode_picked" == *"@"* ]]; then
    res=$(echo "$mode_picked" | cut -d'@' -f1)
    rate=$(echo "$mode_picked" | cut -d'@' -f2)
    save_mode
    hyprctl keyword monitor "$monitor_picked,$res@$rate,auto,1"
fi
}

main_menu
